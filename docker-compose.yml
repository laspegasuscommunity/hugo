#`version: "3.5"` указывает версию формата файла Docker Compose, который будет использоваться. В данном случае это версия 3.5. Эта версия поддерживает такие возможности, как объекты `config`, `секреты` и опции `deploy` для развертывания сервисов в рое.
version: "3.5"

#Это определение сети под названием "docker_lasp" с именем сети по умолчанию. Эта сеть может использоваться для соединения различных служб, определенных в файле Docker Compose, позволяя им взаимодействовать друг с другом.
networks:
  docker_lasp:
    name: $DEFAULT_NETWORK

services:
  #`hugo:` определяет сервис для запуска генератора статических сайтов Hugo. Он определяет образ для использования, переменные окружения для загрузки из файла, команду для запуска, метки для конфигурации обратного прокси Traefik, порты для открытия, тома для монтирования и сеть для подключения.
  hugo:
    #Эта команда определяет команду, которая будет выполняться при запуске контейнера для службы `hugo`. В частности, запускается команда `server` с опциями `--appendPort=false`, `--disableFastRender` и `--baseURL https://EXAMPLE.COM`. Эти параметры настраивают сервер Hugo на то, чтобы не добавлять номер порта к базовому URL, отключить быстрый рендеринг и установить базовый URL на `https://EXAMPLE.COM`.
    command: server --appendPort=false --disableFastRender --baseURL https://EXAMPLE.COM
    #`env_file` указывает файл с именем "hugo.env", который содержит переменные окружения, загружаемые в контейнер Hugo.
    env_file:
      - "hugo.env"
    #`image: klakegg/hugo:0.107.0` указывает образ Docker для использования сервиса `hugo`, который является генератором статических сайтов Hugo. Образ берется из Docker Hub и имеет тег `0.107.0` для контроля версий.
    image: klakegg/hugo:0.107.0
    #Это метки для конфигурации обратного прокси Traefik для сервиса `hugo`. Они указывают точки входа, правило маршрутизации запросов, имя сервиса, преобразователь TLS сертификатов, порт балансировщика нагрузки и промежуточное программное обеспечение для перенаправления запросов с `www.EXAMPLE.COM` на `EXAMPLE.COM`.
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hugo.entrypoints=websecure"
      #Эта строка определяет правило для обратного прокси Traefik направлять запросы к службе `hugo` на основе заголовка хоста входящего запроса. В частности, она говорит, что запросы с заголовком хоста `EXAMPLE.COM` или `www.EXAMPLE.COM` должны направляться на сервис `hugo`.
      - "traefik.http.routers.hugo.rule=Host(`EXAMPLE.COM`) || Host(`www.EXAMPLE.COM`)"
      - "traefik.http.routers.hugo.service=hugo"
      - "traefik.http.routers.hugo.tls.certresolver=letsencrypt"
      - "traefik.http.services.hugo.loadbalancer.server.port=1313"
      - "traefik.http.routers.hugo.middlewares=hugo-redirect"
      #Эта строка определяет промежуточное ПО для обратного прокси Traefik для перенаправления запросов с `www.EXAMPLE.COM` на `EXAMPLE.COM`. В частности, она использует регулярное выражение для соответствия URL входящего запроса и заменяет любое вхождение `www.` пустой строкой, эффективно перенаправляя запрос на не-www версию домена.
      - "traefik.http.middlewares.hugo-redirect.redirectregex.regex=^(https?://)www.(.*)$$"
      #Эта строка определяет замену регулярного выражения для промежуточного программного обеспечения Traefik `hugo-redirect`. В частности, она заменяет любое вхождение `www.` в URL входящего запроса пустой строкой, эффективно перенаправляя запрос с `www` версии домена на не `www` версию. `$` и `$` являются обратными ссылками на совпадающие группы в регулярном выражении.
      - "traefik.http.middlewares.hugo-redirect.redirectregex.replacement=$${1}$${2}"
    #`ports: - "1313:1313"` открывает порт 1313 на контейнере для хост-машины, позволяя направлять трафик на контейнер через этот порт. Первый `1313` - это порт на хост-машине, а второй `1313` - порт на контейнере. Это позволяет направлять трафик на контейнер через порт 1313 хост-машины.
    ports:
      - "1313:1313"
    #`restart: always` - это опция конфигурации в Docker Compose, которая указывает, что контейнер всегда должен перезапускаться, если он останавливается по какой-либо причине, например, в результате сбоя или ручной остановки. Это гарантирует, что контейнер всегда запущен и доступен, что важно для служб, которые должны быть постоянно доступны, например, веб-серверы или базы данных.
    restart: always
    #`volumes: - "./hugo:/src"` монтирует локальный каталог `./hugo` в каталог контейнера `/src`. Это позволяет контейнеру получать доступ и использовать файлы в локальном каталоге `./hugo`.
    volumes:
      - "./hugo:/src"
    #`container_name: hugo` задает имя контейнера для сервиса `hugo` - "hugo". Это позволяет легко идентифицировать контейнер и управлять им с помощью команд Docker.
    container_name: hugo
    #`networks: - "docker_net"` определяет сеть, к которой будут подключаться контейнеры Docker для сервисов в этом файле Docker Compose. В частности, создается сеть с именем "docker_net" и все сервисы в этом файле подключаются к этой сети. Это позволит контейнерам общаться друг с другом по сети и совместно использовать ресурсы, например, тома.
    networks:
      - "docker_net"